[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 11.0.12)
[debug] Load.defaultLoad until apply took 316.014209ms
[debug]           Load.loadUnit: plugins took 115.939375ms
[debug]           Load.loadUnit: defsScala took 0.5585ms
[debug] [Loading] Scanning directory /opt/graphx-scripts/project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /opt/graphx-scripts/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.475125 ms
[debug]               Load.resolveProject(graphx-scripts-build) took 24.461709ms
[debug]             Load.loadTransitive: finalizeProject(Project(id graphx-scripts-build, base: /opt/graphx-scripts/project, plugins: List(<none>))) took 52.011666ms
[debug] [Loading] Done in /opt/graphx-scripts/project, returning: (graphx-scripts-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 75.912667ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.086667ms
[debug]         Load.loadUnit(file:/opt/graphx-scripts/project/, ...) took 199.815167ms
[debug]       Load.apply: load took 320.99625ms
[debug]       Load.apply: resolveProjects took 2.597541ms
[debug]       Load.apply: finalTransforms took 38.327083ms
[debug]       Load.apply: config.delegates took 2.85725ms
[debug]       Load.apply: Def.make(settings)... took 389.846542ms
[debug]       Load.apply: structureIndex took 71.949292ms
[debug]       Load.apply: mkStreams took 0.877584ms
[info] loading project definition from /opt/graphx-scripts/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1330.142959ms
[debug]     Load.loadUnit: defsScala took 0.002542ms
[debug] [Loading] Scanning directory /opt/graphx-scripts
[debug]       Load.loadUnit: mkEval took 2.598417ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /opt/graphx-scripts, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4745 ms
[info] loading settings for project graphx-scripts from build.sbt ...
[debug]         Load.resolveProject(graphx-scripts) took 1.588125ms
[debug]       Load.loadTransitive: finalizeProject(Project(id graphx-scripts, base: /opt/graphx-scripts, plugins: List(<none>))) took 3.519042ms
[debug] [Loading] Done in /opt/graphx-scripts, returning: (graphx-scripts)
[debug]     Load.loadUnit: loadedProjectsRaw took 1076.617875ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.668208ms
[debug]   Load.loadUnit(file:/opt/graphx-scripts/, ...) took 2410.210917ms
[debug] Load.apply: load took 2416.22021ms
[debug] Load.apply: resolveProjects took 0.056459ms
[debug] Load.apply: finalTransforms took 4.408667ms
[debug] Load.apply: config.delegates took 0.224625ms
[debug] Load.apply: Def.make(settings)... took 63.381083ms
[debug] Load.apply: structureIndex took 16.437958ms
[debug] Load.apply: mkStreams took 0.002333ms
[info] set current project to graphx-scripts (in build file:/opt/graphx-scripts/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(package, None, None)
[debug] Evaluating tasks: Compile / package
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
